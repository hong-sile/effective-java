package chapter2;

/** Effective java 항목 7 파이널라이저의 사용을 피하자.<br>
 * 파이널라이저의 가장 큰 단점은 언제 실행될지 모른다는 것이다.<br>
 * 파이널라이저의 스레드의 우선순위가 낮게 잡혀있으면, 상당한 양의 메모리 유출이 발생할 수 있다.<br>
 * 심지어 파이널 라이저가 필수적으로 실행된다는 보장 또한 없다.<br>
 * 차라리 종료메소드를 따로 정의하여 이를 사용하도록 한다.<br>
 * 또한 파이널라이저는 체이닝이 자동으로 되지 않으므로, <br>
 * 서브 클래스의 파이널라이저에서는 상위 클래스의 파이널라이저를 포함해야한다.<br>
 * 이 부분은 나중에 한번 더 확인해보기, 모르는 개념이 많음.
 */
public class Finalizer {

}

/**
 * 최상위 클래스인 Object클래스는 finalize라는 이름의 protected 메쏘드를 가지고 있다. <br>
 * 이것은 이 클래스의 객체가 가비지 콜렉션 과정에서 가지고 있던 리소스가 반환될 때 해야 할 일에 대한 정의를 가지고 있다.<br>
 * 물론, 이것은 사용자가 정의한 클래스에서 재정의할 수 있다. 만일 사용자의 클래스에 이 메소드를 재정의했다면, <br>
 * 그 finalize메쏘드를 객체의 Finalizer라고 부른다.<br>
 * C++의 소멸자와 같은 개념으로 Finalizer를 생각하면 안 된다.
 */